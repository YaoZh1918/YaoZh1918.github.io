<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YaoZh1918]]></title>
  <link href="http://yaozh1918.github.io/atom.xml" rel="self"/>
  <link href="http://yaozh1918.github.io/"/>
  <updated>2016-05-25T21:51:14+08:00</updated>
  <id>http://yaozh1918.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[MongoDB安装及pymongo入门]]></title>
    <link href="http://yaozh1918.github.io/14641625300131.html"/>
    <updated>2016-05-25T15:48:50+08:00</updated>
    <id>http://yaozh1918.github.io/14641625300131.html</id>
    <content type="html"><![CDATA[
<p>在自己的ubuntu上装MongoDB时遇到了一些问题，装好也不太会用，写篇文章记录下吧！</p>

<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">安装</a>
</li>
<li>
<a href="#toc_1">启动/停止服务</a>
</li>
<li>
<a href="#toc_2">PyMongo</a>
<ul>
<li>
<a href="#toc_3">Installation</a>
</li>
<li>
<a href="#toc_4">Tutorial</a>
<ul>
<li>
<a href="#toc_5">Making a connection</a>
</li>
<li>
<a href="#toc_6">Database</a>
</li>
<li>
<a href="#toc_7">Collection</a>
</li>
<li>
<a href="#toc_8">Documents</a>
<ul>
<li>
<a href="#toc_9">insert</a>
</li>
<li>
<a href="#toc_10">find</a>
</li>
<li>
<a href="#toc_11">sort</a>
</li>
<li>
<a href="#toc_12">update</a>
</li>
<li>
<a href="#toc_13">remove</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">Aggregation</a>
</li>
<li>
<a href="#toc_15">Indexes</a>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">安装</h2>

<p>我的系统是<code>Ubuntu 14.04.4 LTS</code>.</p>

<p>安装还是按照<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">官方教程</a>比较好，虽然<code>ubuntu</code>的<code>apt-get</code>中有个<code>mongodb</code>，但我们用的不是这个。</p>

<p>安装过程也比较无脑，照着做就好了：</p>

<pre><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
echo &quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list
sudo apt-get update
sudo apt-get install -y mongodb-org
</code></pre>

<p>注意第一句是要导入一个<code>GPG Key</code>，不同版本不一样，实际装的时候去官网看一眼。</p>

<h2 id="toc_1">启动/停止服务</h2>

<p>安装好后就可以启动停止mongodb的服务了：</p>

<pre><code>sudo service mongod start
sudo service mongod stop
sudo service mongod restart
</code></pre>

<p>注意这里的<code>mongod</code>指代的是mongodb的deamon。</p>

<h2 id="toc_2">PyMongo</h2>

<p>感觉shell不是很给力，就直接看pymongo的教程吧，下面是按照<a href="https://docs.mongodb.com/getting-started/python/">官网</a>的教程，和api的<a href="http://api.mongodb.com/python/current/index.html">文档</a>整理写的一些基本函数。</p>

<p>首先导入官网给出的一个数据，我们后面的教程都会在这个数据上操作：</p>

<pre><code>wget https://raw.githubusercontent.com/mongodb/docs-assets/primer-dataset/primer-dataset.json
mongoimport --db test --collection restaurants --drop --file primer-dataset.json
</code></pre>

<p>第一行是下载文件，第二行是将数据导入到名为test的database中名为restaurants的collection中。</p>

<h3 id="toc_3">Installation</h3>

<p>安装就用<code>pip</code>：</p>

<pre><code>sudo pip install pymongo
</code></pre>

<h3 id="toc_4">Tutorial</h3>

<p>首先导入module：</p>

<pre><code>from pymongo import MongoClient
</code></pre>

<h4 id="toc_5">Making a connection</h4>

<p>利用<code>MongoClient</code>创建一个cursor，参数是可以为空的，默认会连接到<code>localhost:27017</code>，也就是说以下三句效果相同：</p>

<pre><code>client = MongoClient()
client = MongoClient(&#39;localhost&#39;, 27017)
client = MongoClient(&#39;mongodb://localhost:27017/&#39;)
</code></pre>

<h4 id="toc_6">Database</h4>

<p>创建好连接后就可以对数据库进行操作了，例如想看所有的数据库：</p>

<pre><code>client.database_names()
</code></pre>

<p>一般来说会看到一个叫<code>test</code>的数据库。</p>

<p>连接到一个数据库有两种方法，第二种方法类似dict，如果数据库名有特殊字符就只能用这种。</p>

<pre><code>db = client.test
db = client[&#39;a-database&#39;]
</code></pre>

<p>注意，MongoDB<strong>无需显式创建数据库</strong>，例如上面的代码，<code>a-database</code>如果不存在，此时会自动创建一个（其实也不是，只有真正对这个数据库进行操作后才会创建）。</p>

<p>如果要删除一个database，则需要在<code>client</code>中操作：</p>

<pre><code>db.drop_database(&#39;a_database&#39;)
</code></pre>

<p>现在我们进入<code>test</code>数据库进行后续的教程。</p>

<h4 id="toc_7">Collection</h4>

<p>因为<code>MongoDB</code>是<code>NoSQL</code>的，有一些概念与传统的RDBMS有区别，比如这个<code>collection</code>就类似于RDBMS中的关系表<code>table</code>，<code>table</code>是记录<code>row</code>的集合，而<code>collection</code>是<code>document</code>的集合。</p>

<p>和操作database很像，两种连接方式，无须显式创建。</p>

<pre><code>db.collection_names()  # 查看当前数据库下的所有collection
collection = db.restaurants
collection = db[&#39;restaurants&#39;]
</code></pre>

<p>类似的，删除<code>collection</code>要在database中进行：</p>

<pre><code>db.drop_collection(&#39;a_collection&#39;)
</code></pre>

<h4 id="toc_8">Documents</h4>

<p><code>MongoDB</code>中的数据都是以一种类似<code>JSON</code>的文档<code>document</code>存储的，类似RDBMS中的记录／行<code>row</code>，不同的是，一个collection中的documents可以有不同的域<code>field</code>，而一张表中的行必须有相同的属性／列<code>column</code>。</p>

<p>document按照类<code>JSON</code>的格式存，在<code>python</code>中就会表示为<code>dict</code>，例如下面就是一个document的内容：</p>

<pre><code>from datetime import datetime
d = {
        &quot;address&quot;: {
            &quot;street&quot;: &quot;2 Avenue&quot;,
            &quot;zipcode&quot;: &quot;10075&quot;,
            &quot;building&quot;: &quot;1480&quot;,
            &quot;coord&quot;: [-73.9557413, 40.7720266]
        },
        &quot;borough&quot;: &quot;Manhattan&quot;,
        &quot;cuisine&quot;: &quot;Italian&quot;,
        &quot;grades&quot;: [
            {
                &quot;date&quot;: datetime.strptime(&quot;2014-10-01&quot;, &quot;%Y-%m-%d&quot;),
                &quot;grade&quot;: &quot;A&quot;,
                &quot;score&quot;: 11
            },
            {
                &quot;date&quot;: datetime.strptime(&quot;2014-01-16&quot;, &quot;%Y-%m-%d&quot;),
                &quot;grade&quot;: &quot;B&quot;,
                &quot;score&quot;: 17
            }
        ],
        &quot;name&quot;: &quot;Vella&quot;,
        &quot;restaurant_id&quot;: &quot;41704620&quot;
    }
)
</code></pre>

<p>假设我们现在的collection就是一开始添加的<code>restaurants</code>，可以先看看有多少documents：</p>

<pre><code>collection.count()
</code></pre>

<h5 id="toc_9">insert</h5>

<p>现在将上面的那个document插入：</p>

<pre><code>result = collection.insert_one(d)
result.inserted_id
</code></pre>

<p>注意会返回一个<code>InsertOneResult</code>类型的数据，其有个属性<code>inserted_id</code>会给出插入的document在collection中的id号，对于一个collection中各个documents都是不同的，如果插入时没有给定，则会自动创建。</p>

<p>如果想一次插入多个，可以用<code>insert_many</code>：</p>

<pre><code>result = collection.insert_many([d1, d2, d3])
result.inserted_ids
</code></pre>

<p>类似的，会返回一个<code>InsertManyResult</code>类的数据，可以看所有documents的id。</p>

<h5 id="toc_10">find</h5>

<p>本小节会介绍两个函数<code>find</code>和<code>find_one</code>，从函数名就可以猜出，<code>find</code>会找出所有符合条件的documents，其返回的数据类型为<code>Cursor</code>，实际上就是一个<code>iterator</code>，需要迭代访问；而<code>find_one</code>只会返回第一个满足条件的document，数据类型是<code>dict</code>。</p>

<pre><code>cursor = find()  # 条件为空，也就是会返回所有的documents
for doc in cursor:  # 迭代访问
    print doc
find_one()  # 返回第一个document
</code></pre>

<p>还是拿<code>restaurants</code>做示范，如果要找<code>borough</code><strong>等于</strong><code>Manhattan</code>的，将条件按<code>dict</code>格式传进去：</p>

<pre><code>cursor = db.restaurants.find({&quot;borough&quot;: &quot;Manhattan&quot;})
</code></pre>

<p><code>dict</code>可以嵌套<code>dict</code>，同样的<code>document</code>也可以嵌套<code>document</code>，例如<code>address</code>下还有<code>street</code>、<code>zipcode</code>等，如果要找<code>zipcode</code>等于<code>10075</code>的，则要用<code>.</code>来连接：</p>

<pre><code>cursor = db.restaurants.find({&quot;address.zipcode&quot;: &quot;10075&quot;})
</code></pre>

<p>一家餐厅可能有多个用户打分，这就形成了一个documents的列表，<code>grades</code>就是这样，如果想找<code>grades</code>中是否<strong>包含</strong>一个document的<code>grade</code><strong>等于</strong><code>B</code>，则可以这样实现：</p>

<pre><code>cursor = db.restaurants.find({&quot;grades.grade&quot;: &quot;B&quot;})
</code></pre>

<p>如果涉及到操作符，如大于小于，则用下面这种格式（dict套dict）：</p>

<pre><code>{ &lt;field1&gt;: { &lt;operator1&gt;: &lt;value1&gt; } }
</code></pre>

<p>比如</p>

<pre><code>cursor = db.restaurants.find({&quot;grades.score&quot;: {&quot;$gt&quot;: 30}})
</code></pre>

<p>具体的操作符可以去看<a href="https://docs.mongodb.com/manual/reference/operator/">官方文档</a>。</p>

<p><code>AND</code>操作很简单，只要将多个条件写在dict中就好：</p>

<pre><code>cursor = db.restaurants.find({&quot;cuisine&quot;: &quot;Italian&quot;, &quot;address.zipcode&quot;: &quot;10075&quot;})
</code></pre>

<p><code>OR</code>则比较特殊，dict中用<code>$or</code>作为key，条件写在list中作value：</p>

<pre><code>cursor = db.restaurants.find(
    {&quot;$or&quot;: [{&quot;cuisine&quot;: &quot;Italian&quot;}, {&quot;address.zipcode&quot;: &quot;10075&quot;}]})
</code></pre>

<p><code>find_one</code>与上面类似，就不多说了，唯一的区别就是返回的是一个dict。</p>

<h5 id="toc_11">sort</h5>

<p>查询到多个结果后可能希望对结果排序，那么就要对<code>Cursor</code>用<code>sort</code>，比如希望先按<code>borough</code>升序，再按<code>zipcode</code>升序，可以写为：</p>

<pre><code>cursor = db.restaurants.find().sort([
    (&quot;borough&quot;, pymongo.ASCENDING),
    (&quot;address.zipcode&quot;, pymongo.ASCENDING)
])
</code></pre>

<p>如果只按照一个属性排序，则直接将属性和方向传入即可：</p>

<pre><code>cursor = db.restaurants.find().sort(&quot;borough&quot;, pymongo.ASCENDING)
</code></pre>

<p>注意，<code>sort</code>是inplace的，虽然也会返回一个<code>Cursor</code>，但假如已经查询完返回了一个<code>Cursor</code>，则下面两句代码没有区别：</p>

<pre><code>cursor = cursor.sort(&quot;borough&quot;, pymongo.ASCENDING)
cursor.sort(&quot;borough&quot;, pymongo.ASCENDING)
</code></pre>

<h5 id="toc_12">update</h5>

<p>类似的，本节也有两个函数<code>update_one</code>和<code>update_many</code>。</p>

<p>只需将查询条件和更新内容作为两个参数传入即可，例如修改<code>cuisine</code>为<code>American (New)</code>（用到<code>$set</code>），修改<code>lastModified</code>为当前时间（用到<code>$currentDate</code>）：</p>

<pre><code>result = db.restaurants.update_one(
    {&quot;name&quot;: &quot;Juni&quot;},
    {
        &quot;$set&quot;: {
            &quot;cuisine&quot;: &quot;American (New)&quot;
        },
        &quot;$currentDate&quot;: {&quot;lastModified&quot;: True}
    }
)
result.matched_count  # 查找到的数量
result.modified_count  # 实际修改的数量
</code></pre>

<p>这个部分也有好多操作符，还是推荐去扫一遍<a href="https://docs.mongodb.com/manual/reference/operator/">官方文档</a>。</p>

<p>这个是更新，如果要进行替换，可以用<code>replace_one</code>（并没有<code>replace_many</code>），第一个参数为条件，第二个参数为替换内容，替换后只有<code>_id</code>会保留。</p>

<h5 id="toc_13">remove</h5>

<p>要删除document也有两个函数，<code>delete_one</code>和<code>delete_many</code>，只需传入查询条件即可，返回的结果可以查看实际删除的数量：</p>

<pre><code>result = db.restaurants.delete_many({&quot;borough&quot;: &quot;Manhattan&quot;})
result.deleted_count
</code></pre>

<p>如果要删除所有，则可以传入条件<code>{}</code>（为什么不drop掉collection呢？）</p>

<h4 id="toc_14">Aggregation</h4>

<p>聚合这一块内容很复杂，通过<code>aggregate</code>可以实现SQL中的<code>group by</code>、<code>having</code>等功能，在3.2版本后，还可以实现<code>join</code>操作！坑比较大，等有空再单独写一章吧。</p>

<h4 id="toc_15">Indexes</h4>

<p><code>index</code>主要是用来加速特定查找的，如果没有索引，每次查找就要遍历一遍collection，效率自然不高。<code>MongoDB</code>会自动把索引建在<code>_id</code>上，通常对我们的查找没有帮助，需要我们手动选择一个field建立，当然也可以选择一组fields建立：</p>

<pre><code>db.restaurants.create_index([
    (&quot;cuisine&quot;, pymongo.ASCENDING),
    (&quot;address.zipcode&quot;, pymongo.DESCENDING)
])
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing phpMyAdmin on Ubuntu]]></title>
    <link href="http://yaozh1918.github.io/14633851869005.html"/>
    <updated>2016-05-16T15:53:06+08:00</updated>
    <id>http://yaozh1918.github.io/14633851869005.html</id>
    <content type="html"><![CDATA[
<p>This article is used to record the installation steps of phpMyAdmin.</p>

<span id="more"></span><!-- more -->

<p>These days, I have a large dataset to deal with, which contains several tables. So I want to use a database to store it. And finally I chose <code>mysql</code>, but I found it was hard to have an intuitive insight into dataset through command line. A GUI was needed. It seemed that <code>phpMyAdmin</code> could meet my need. But installing was not very easy, so I wrote this article to record the correct steps in case I forget.</p>

<p>Besides, my operating system is <code>Ubuntu 14.04.4 LTS</code>.</p>

<h2 id="toc_0">Install Apache</h2>

<p><a href="http://my.oschina.net/tinydeng/blog/338579?fromerr=6i6O5LLs">This</a> article shows a correct and convenient way.</p>

<p>First, update the package lists.</p>

<p><code>sudo apt-get update</code></p>

<p>And then, install apache. Note that the package name is <code>apache2</code>.</p>

<p><code>sudo apt-get install apache2</code></p>

<p>After installation, you can visit <code>localhost</code> to ensure installation succeeded. Henceforth, you can start the server by using <code>sudo apachectl -k start</code>, or stop it by using <code>sudo apachectl -k stop</code>.</p>

<h2 id="toc_1">Install php</h2>

<p>Well, it&#39;s quiet easy.</p>

<p><code>sudo apt-get install php5 libapache2-mod-php5</code></p>

<p>Maybe the apache server need restarted.</p>

<p><code>sudo apachectl -k restart</code></p>

<h2 id="toc_2">Install mysql</h2>

<p>In the <a href="http://my.oschina.net/tinydeng/blog/338579?fromerr=6i6O5LLs">article</a> I mentioned before, the author only installed <code>mysql-server</code>. But I installed 3 packages.</p>

<p><code>sudo apt-get install mysql-server mysql-client libmysqlclient-dev</code></p>

<p>During the installation, you will be asked to input the password of root user. If you want to use <code>phpMyAdmin</code>, you should set one, because your database can be visited through network by other users. </p>

<p>I doubt there may be some other packages needed. I&#39;m sorry I don&#39;t remember it. You can install them all, just in case. XD</p>

<p><code>sudo apt-get install php5-mysql php5-curl php5-gd</code></p>

<h2 id="toc_3">Install phpMyAdmin</h2>

<p>Finally, install <code>phpMyAdmin</code>.</p>

<p><code>sudo apt-get install phpmyadmin</code></p>

<p>During the installation, you will be asked to choose whether to use default settings or not(Of course choose yes) and a password is required.</p>

<p>Your <code>phpMyAdmin</code> will be installed automatically under <code>/usr/share/phpMyAdmin</code>, so you should make a symbolic link of this folder in <code>/var/www/html</code>.</p>

<p><code>sudo ln -s /usr/share/phpmyadmin/ /var/www/html/</code></p>

<h2 id="toc_4">An unexpected error</h2>

<p>When I logged in the phpMyAdmin, there was a warning, saying &#39;The mcrypt extension is missing. Please check your PHP configuration&#39;. There is a solution on <a href="http://stackoverflow.com/questions/22721630/the-mcrypt-extension-is-missing-please-check-your-php-configuration/">stackoverflow</a>. The top voted answer offered a 4-step solution:</p>

<pre><code>sudo apt-get install php5-mcrypt
sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available
sudo php5enmod mcrypt 
sudo service apache2 restart
</code></pre>

<p>But actually, the last 2 steps are enough, at least for me.</p>

<h2 id="toc_5">Job Done!</h2>

<p>Now you can enjoy your <code>mysql</code> using GUI through <code>localhost/phpmyadmin</code>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Pygame on Mac OS X]]></title>
    <link href="http://yaozh1918.github.io/14623285310444.html"/>
    <updated>2016-05-04T10:22:11+08:00</updated>
    <id>http://yaozh1918.github.io/14623285310444.html</id>
    <content type="html"><![CDATA[
<p>It&#39;s said that <code>pygame</code> provided on their <a href="http://www.pygame.org/download.shtml">website</a> is not compatible with Mac system python because <code>pygame</code> is built for 32 bit python while system python is 64 bit. </p>

<span id="more"></span><!-- more -->

<p>Luckily I have found a <a href="https://bitbucket.org/pygame/pygame/issues/82/homebrew-on-leopard-fails-to-install#comment-627494">solution</a> and now I post it on my blog in case I forget it.</p>

<pre><code>brew install mercurial
brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi 
sudo pip install hg+http://bitbucket.org/pygame/pygame
</code></pre>

<p>After installation, you can validate it via this interesting <a href="https://github.com/sourabhv/FlapPyBird">repo</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort 3x3 grid by rotating 2x2 subgrids]]></title>
    <link href="http://yaozh1918.github.io/14621764503901.html"/>
    <updated>2016-05-02T16:07:30+08:00</updated>
    <id>http://yaozh1918.github.io/14621764503901.html</id>
    <content type="html"><![CDATA[
<p>Given a 3x3 grid filled with 1-9, how do you sort it to another given grid by rotating 2x2 subgrids?</p>

<p>Some discussions can be found <a href="http://stackoverflow.com/questions/23433442/sort-3x3-grid-by-rotating-2x2-subgrids">here</a>.</p>

<span id="more"></span><!-- more -->

<pre><code>import numpy as np
from Queue import Queue


class Sort_Grid:

    def __init__(self, S=123456789, T=947852361):
        self.source = S
        self.terminal = T

    def num2array(self, num):
        ret = np.zeros(9, np.uint8)
        for i in xrange(9):
            ret[i] = num / 10**(8-i)
            num -= ret[i] * 10**(8-i)
        return ret

    def array2num(self, arr):
        return np.sum(arr * 10**np.arange(8,-1,-1))

    def biBFS(self):
        self.basis = [[0,0], [0,1], [1,0], [1,1]]
        self.subbasis = [[1,3,0,2], [2,0,3,1]]
        self.lookup = [np.zeros(987654321+1, bool) for i in range(2)]
        self.queue = [Queue() for i in range(2)]
        self.lookup[0][self.source] = True
        self.lookup[1][self.terminal] = True
        level0 = 0
        level1 = 0
        c0 = self.source
        c1 = self.terminal
        if c0 == c1:
            return 0, 0, 0
        while True:
            if level0 &lt; level1:
                midstate = self.EnQueue(c0, level0, 0)
                if midstate:
                    return midstate, level0, level1
                c0, level0 = self.queue[0].get()
            else:
                midstate = self.EnQueue(c1, level1, 1)
                if midstate:
                    return midstate, level0, level1
                c1, level1 = self.queue[1].get()

    def EnQueue(self, state, level, ind):
        array = self.num2array(state)
        for i in range(4):
            shadow = array.copy()
            x, y = self.basis[i]
            base = np.array([x*3+y, x*3+y+1, (x+1)*3+y, (x+1)*3+y+1])
            for j in range(2):
                shadow[base] = array[base[self.subbasis[j]]]
                num = self.array2num(shadow)
                if ~self.lookup[ind][num]:
                    if self.lookup[1-ind][num]:
                        return num
                    self.queue[ind].put((num, level+1))
                    self.lookup[ind][num] = True

def biBFS(S, T, seqlist):
    if S == T:
        return
    mid, l0, l1 = Sort_Grid(S, T).biBFS()
    if mid==0 or mid in seqlist:
        return
    seqlist.insert(seqlist.index(S)+1, mid)
    biBFS(S, mid, seqlist)
    biBFS(mid, T, seqlist)

def main():
    S = 123456789
    T = 947852361
    seqlist = [S, T]
    biBFS(S, T, seqlist)
    return seqlist

if __name__ == &#39;__main__&#39;:
    main()

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开博客啦！]]></title>
    <link href="http://yaozh1918.github.io/14621706709086.html"/>
    <updated>2016-05-02T14:31:10+08:00</updated>
    <id>http://yaozh1918.github.io/14621706709086.html</id>
    <content type="html"><![CDATA[
<p>终于开了一个博客，感谢有<code>MWeb</code>这么好用的软件。
之前一直用的作业部落的<code>Cmd Markdown</code>，也很不错，也感谢一下XD。但比起<code>MWeb</code>还是逊色不少，这个可以直接生成静态页面，几步就可以挂到<code>Github Pages</code>上了，方便的很！图片、URL什么的插入都很方便。安利一波！</p>

<span id="more"></span><!-- more -->

<p>那么这个博客就主要记录一下关于Machine Learning, Data Mining的一些内容吧，可能还会有一些基本的算法、编程语言、数学的内容。</p>

<p>接下来的内容仅仅是测试一下各项功能是否正常。</p>

<ul>
<li>
<a href="#toc_0">LaTex</a>
</li>
<li>
<a href="#toc_1">Sequence and Flow Chart</a>
</li>
<li>
<a href="#toc_2">Images</a>
</li>
</ul>


<h2 id="toc_0">LaTex</h2>

<p>For example this is a Block level \[x = {-b \pm \sqrt{b^2-4ac} \over 2a}\] formula, and this is an inline Level \(x = {-b \pm \sqrt{b^2-4ac} \over 2a}\) formula.</p>

<p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =
1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}
{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p>

<h2 id="toc_1">Sequence and Flow Chart</h2>

<pre><code class="language-sequence">Andrew-&gt;China: Says Hello
Note right of China: China thinks about it
China--&gt;Andrew: How are you?
Andrew-&gt;&gt;China: I am good thanks!
</code></pre>

<pre><code class="language-flow">st=&gt;start: Start:&gt;http://www.google.com[blank]
e=&gt;end:&gt;http://www.google.com
op1=&gt;operation: My Operation
sub1=&gt;subroutine: My Subroutine
cond=&gt;condition: Yes
or No?:&gt;http://www.google.com
io=&gt;inputoutput: catch something...

st-&gt;op1-&gt;cond
cond(yes)-&gt;io-&gt;e
cond(no)-&gt;sub1(right)-&gt;op1
</code></pre>

<h2 id="toc_2">Images</h2>

<p>My avatar.</p>

<p><img src="http://ooo.0o0.ooo/2016/05/02/5726ffee18657.jpg" alt="icon"/></p>

<p>Resize and center.</p>

<p><img src="http://ooo.0o0.ooo/2016/05/02/5726ffee18657.jpg" alt="icon" class="mw_img_center" style="width:100px;display: block; clear:both; margin: 0 auto;"/></p>

]]></content>
  </entry>
  
</feed>
